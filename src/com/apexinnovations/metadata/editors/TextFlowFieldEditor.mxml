<?xml version="1.0" encoding="utf-8"?>
<editors:FieldEditor xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:metadata="com.apexinnovations.metadata.*"
					  xmlns:editors="com.apexinnovations.metadata.editors.*"
					  implements="com.apexinnovations.metadata.editors.IExpandableEditor"
					  width="100%">
	
	<editors:states>
		<s:State name="collapsed" />
		<s:State name="expanded" />
	</editors:states>
	
	<fx:Script>
		<![CDATA[
			import com.apexinnovations.metadata.events.TranswarpEditorEvent;
			import com.apexinnovations.transwarp.utils.Utils;
			
			import flashx.textLayout.conversion.ConversionType;
			import flashx.textLayout.conversion.TextConverter;
			import flashx.textLayout.elements.Configuration;
			import flashx.textLayout.elements.IConfiguration;
			import flashx.textLayout.elements.TextFlow;
			import flashx.textLayout.formats.TextLayoutFormat;
			import flashx.textLayout.formats.WhiteSpaceCollapse;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.events.StateChangeEvent;
			
			import spark.events.TextOperationEvent;
			
			protected var watcher:ChangeWatcher;
			protected var pendingMarkup:XMLList;
			protected var dirty:Boolean = false;
			protected var prevMarkup:XML;
			
			
			[Bindable] public var maxTextHeight:Number = Number.MAX_VALUE;
			
			protected function setupBinding():void {
				if(watcher)
					watcher.unwatch();
				watcher = BindingUtils.bindSetter(markupChanged, xml, field);
			}
			
			override protected function createChildren():void {
				super.createChildren();
				if(pendingMarkup) {
					markupChanged(pendingMarkup)
					pendingMarkup = null;
				}
			}
						
			protected function markupChanged(value:XMLList):void {
				if(!textEditor) {
					pendingMarkup = value;
					return;
				}
				
				var config:Configuration = new Configuration();
				var fmt:TextLayoutFormat = new TextLayoutFormat();
				fmt.whiteSpaceCollapse = WhiteSpaceCollapse.COLLAPSE;
				config.textFlowInitialFormat = fmt;				
				
				textEditor.textFlow = TextConverter.importToFlow(value ? value[0] : null, TextConverter.TEXT_LAYOUT_FORMAT, config);
				prevMarkup = XML(TextConverter.export(textEditor.textFlow, TextConverter.TEXT_LAYOUT_FORMAT, ConversionType.XML_TYPE)) 
			}
											
			override public function set field(value:String):void {
				super.field = value;
				if(xml && field)
					setupBinding();
			}
			
			override public function set xml(value:XML):void {
				super.xml = value;
				if(xml && field)
					setupBinding();
			}
			
			public function commitChanges():void {
				if(!dirty)
					return;
				
				var node:XML = xml[field][0];
				if(node)
					delete node.*;
				else
					node = <{field}/>;
				
				//trace("committing changes", this);
				
				var markup:XML = XML(TextConverter.export(textEditor.textFlow, TextConverter.TEXT_LAYOUT_FORMAT, ConversionType.XML_TYPE));
				
				var s:String = "";
				for each(var child:XML in markup..*)
					s += child.text();
					
				if(Utils.trim(s) != "")
					node.appendChild(markup);
				
				xml[field] = node;
				dirty = false;
			}
			
			public function expand():void {
				if(currentState == "expanded")
					return;
				textEditor.expand();
				currentState = "expanded"				
			}
			
			public function collapse():void {
				if(currentState == "collapsed")
					return;
				
				textEditor.collapse();
				commitChanges();
				currentState = "collapsed";
			}

			protected function textEditor_focusInHandler(event:FocusEvent):void {
				dispatchEvent(new Event(FOCUS_GAINED));
			}
			
			protected function textChange(event:TextOperationEvent):void {
				// Hack to prevent extraneous change events from doing a copy
				var markup:XML = XML(TextConverter.export(textEditor.textFlow, TextConverter.TEXT_LAYOUT_FORMAT, ConversionType.XML_TYPE))
				if(markup != prevMarkup) {
					//trace("dirty = true", this);
					dirty = true;
					dispatchEvent(new Event(TranswarpEditorEvent.FIELD_VALUE_CHANGE, true));
				}
				prevMarkup = markup;
			}

		]]>
	</fx:Script>
	
	<editors:TextEditor id="textEditor" focusIn="textEditor_focusInHandler(event)" focusOut="commitChanges()" change="textChange(event)" left="0" right="-5" height="100%" maxTextHeight="{maxTextHeight}"/>
	
</editors:FieldEditor>
